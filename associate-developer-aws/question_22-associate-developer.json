{
  "id": "103644",
  "question": "question-22",
  "body": "A developer is creating an application that will store personal health information (PHI). The PHI needs to be encrypted at all times. An encrypted Amazon RDS for MySQL DB instance is storing the data. The developer wants to increase the performance of the application by caching frequently accessed data while adding the ability to sort or rank the cached datasets.\nWhich solution will meet these requirements?\nA. Create an Amazon ElastiCache for Redis instance. Enable encryption of data in transit and at rest. Store frequently accessed data in the cache.\nB. Create an Amazon ElastiCache for Memcached instance. Enable encryption of data in transit and at rest. Store frequently accessed data in the cache.\nC. Create an Amazon RDS for MySQL read replica. Connect to the read replica by using SSL. Configure the read replica to store frequently accessed data.\nD. Create an Amazon DynamoDB table and a DynamoDB Accelerator (DAX) cluster for the table. Store frequently accessed data in the DynamoDB table.\nShow Suggested Answer",
  "comments": [
    {
      "user": "Untamables",
      "selectedAnswer": "A",
      "body": "A\nYou can use Amazon Elasticache for Redis Sorted Sets to easily implement a dashboard that keeps a list of sorted data by their rank.\nhttps://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/elasticache-use-cases.html#elasticache-for-redis-use-cases-gaming\nhttps://aws.amazon.com/elasticache/redis-vs-memcached/",
      "reply": [
        {
          "user": "jipark",
          "body": "in sum,\nREDIS featured encryption, PCI-DSS\nMemCache support AutoDiscovery"
        },
        {
          "user": "AnthonyTL",
          "body": "Both supported encryption, but MemCache doesn't support 'sort or rank'"
        }
      ]
    },
    {
      "user": "jipark",
      "selectedAnswer": "",
      "body": "in sum,\nREDIS featured encryption, PCI-DSS\nMemCache support AutoDiscovery",
      "reply": [
        {
          "user": "AnthonyTL",
          "body": "Both supported encryption, but MemCache doesn't support 'sort or rank'"
        }
      ]
    },
    {
      "user": "AnthonyTL",
      "selectedAnswer": "",
      "body": "Both supported encryption, but MemCache doesn't support 'sort or rank'",
      "reply": []
    },
    {
      "user": "Bibay",
      "selectedAnswer": "A",
      "body": "To meet the requirements of caching frequently accessed data while adding the ability to sort or rank cached datasets, a developer should choose Amazon ElastiCache for Redis. ElastiCache is a web service that provides an in-memory data store in the cloud, and it supports both Memcached and Redis engines. While both engines are suitable for caching frequently accessed data, Redis is a better choice for this use case because it provides sorted sets and other data structures that allow for sorting and ranking of cached datasets. The data in ElastiCache can be encrypted at rest and in transit, ensuring the security of the PHI. Therefore, option A is the correct answer.",
      "reply": []
    },
    {
      "user": "anandkg",
      "selectedAnswer": "A",
      "body": "redis is having the sorting functionality",
      "reply": []
    },
    {
      "user": "Hasitha99",
      "selectedAnswer": "A",
      "body": "* Amazon ElastiCache service provide in-memory cache in the cloud. \n* Redis and MemCache are the 2 popular options which ElastiCache offerd for us.\n* Both support encryption at rest and transist (previously only redis supported this).\n* Redis offerd advance features like datastructures, transactions ,pub/sub etc.\n\nSince question is asking about most cost effective solution(already buit with MYSQL) , we have to ignore the DynamoDB option . \n\nNow we can pick Redis due to its natual sort facility.",
      "reply": []
    },
    {
      "user": "sumanshu",
      "selectedAnswer": "A",
      "body": "B) Eliminated - Memcached does not support advanced data structure\nC) Eliminated - A read replica is not a true caching solution. It is a secondary database instance that replicates data for read-heavy workloads\nD) Eliminated - DynamoDB with DAX adds more operational overhead because you would be introducing a NoSQL database into the architecture when you're already using Amazon RDS (relational database) for storing data.",
      "reply": []
    },
    {
      "user": "trieudo",
      "selectedAnswer": "A",
      "body": "keyword: caching, sort, rank\n\n==> discard B: not support 'sort' and 'rank'\n==> discard C: not 'caching'\n==> discard D: caching only support NoSQL dynamoDB && sort and rank belong to primary key (partition and secondary) of DynamoDB\n\nA fit all requirement",
      "reply": []
    },
    {
      "user": "ahadh7621",
      "selectedAnswer": "A",
      "body": "This question was on my exam July 23rd, 2024. Answer is A.",
      "reply": []
    },
    {
      "user": "tsangckl",
      "selectedAnswer": "",
      "body": "This appear at 17 Jun exam",
      "reply": []
    },
    {
      "user": "65703c1",
      "selectedAnswer": "A",
      "body": "A is the correct answer.",
      "reply": []
    },
    {
      "user": "Vaibs099",
      "selectedAnswer": "",
      "body": "Sorted Sets in Elasticcache redis can do this job.",
      "reply": []
    },
    {
      "user": "leonardoliveros",
      "selectedAnswer": "A",
      "body": "Redis is the best option to cached the results of queries and it also offer a encryption in-transit and at-rest",
      "reply": []
    },
    {
      "user": "nmc12",
      "selectedAnswer": "",
      "body": "Redis: Supports various data structures such as strings, hashes, lists, sets, sorted sets, bitmaps, hyperloglogs, and geospatial indexes.\nMemcached: Primarily supports string-based keys and values; does not support advanced data structures.",
      "reply": []
    },
    {
      "user": "brandon87",
      "selectedAnswer": "A",
      "body": "ElastiCache for Redis also features Online Cluster Resizing, supports encryption, and is HIPAA eligible and PCI DSS compliant.\n\nhttps://aws.amazon.com/elasticache/redis-vs-memcached/",
      "reply": []
    }
  ]
}