{
  "id": "103442",
  "question": "question-13",
  "body": "A company receives food orders from multiple partners. The company has a microservices application that uses Amazon API Gateway APIs with AWS Lambda integration. Each partner sends orders by calling a customized API that is exposed through API Gateway. The API call invokes a shared Lambda function to process the orders.\nPartners need to be notified after the Lambda function processes the orders. Each partner must receive updates for only the partner's own orders. The company wants to add new partners in the future with the fewest code changes possible.\nWhich solution will meet these requirements in the MOST scalable way?\nA. Create a different Amazon Simple Notification Service (Amazon SNS) topic for each partner. Configure the Lambda function to publish messages for each partner to the partner's SNS topic.\nB. Create a different Lambda function for each partner. Configure the Lambda function to notify each partner's service endpoint directly.\nC. Create an Amazon Simple Notification Service (Amazon SNS) topic. Configure the Lambda function to publish messages with specific attributes to the SNS topic. Subscribe each partner to the SNS topic. Apply the appropriate filter policy to the topic subscriptions.\nD. Create one Amazon Simple Notification Service (Amazon SNS) topic. Subscribe all partners to the SNS topic.\nShow Suggested Answer",
  "comments": [
    {
      "user": "Untamables",
      "selectedAnswer": "C",
      "body": "C\nhttps://docs.aws.amazon.com/sns/latest/dg/sns-message-filtering.html",
      "reply": []
    },
    {
      "user": "Bibay",
      "selectedAnswer": "C",
      "body": "Option C is the most scalable way to meet the requirements. This solution allows for a single SNS topic to be used for all partners, which minimizes the need for code changes when adding new partners. By publishing messages with specific attributes to the SNS topic and applying the appropriate filter policy to the topic subscriptions, partners will only receive notifications for their own orders. This approach allows for a more flexible and scalable solution, where new partners can be added to the system with minimal changes to the existing codebase. Option A and D may not be scalable when there are a large number of partners, as creating a separate SNS topic for each partner or subscribing all partners to a single topic may not be feasible. Option B may result in a large number of Lambda functions that need to be managed separately.",
      "reply": []
    },
    {
      "user": "sumanshu",
      "selectedAnswer": "C",
      "body": "A) Eliminated - Every time a new partner is added, a new SNS topic needs to be created. This requires manual configuration and updates to the infrastructure.",
      "reply": [
        {
          "user": "sumanshu",
          "body": "B) Eliminated - Adding a new partner means creating a new Lambda function, increasing operational overhead."
        },
        {
          "user": "sumanshu",
          "body": "C) Correct - A single SNS topic is used. The Lambda function publishes messages with attributes (e.g., partner ID). Each partner subscribes to the SNS topic and uses a filter policy to only receive messages relevant to their partner ID"
        },
        {
          "user": "sumanshu",
          "body": "D) Eliminated - All partners would receive updates for all orders because there is no filtering mechanism to ensure partner-specific messages."
        }
      ]
    },
    {
      "user": "sumanshu",
      "selectedAnswer": "",
      "body": "B) Eliminated - Adding a new partner means creating a new Lambda function, increasing operational overhead.",
      "reply": [
        {
          "user": "sumanshu",
          "body": "C) Correct - A single SNS topic is used. The Lambda function publishes messages with attributes (e.g., partner ID). Each partner subscribes to the SNS topic and uses a filter policy to only receive messages relevant to their partner ID"
        },
        {
          "user": "sumanshu",
          "body": "D) Eliminated - All partners would receive updates for all orders because there is no filtering mechanism to ensure partner-specific messages."
        }
      ]
    },
    {
      "user": "sumanshu",
      "selectedAnswer": "",
      "body": "C) Correct - A single SNS topic is used. The Lambda function publishes messages with attributes (e.g., partner ID). Each partner subscribes to the SNS topic and uses a filter policy to only receive messages relevant to their partner ID",
      "reply": [
        {
          "user": "sumanshu",
          "body": "D) Eliminated - All partners would receive updates for all orders because there is no filtering mechanism to ensure partner-specific messages."
        }
      ]
    },
    {
      "user": "sumanshu",
      "selectedAnswer": "",
      "body": "D) Eliminated - All partners would receive updates for all orders because there is no filtering mechanism to ensure partner-specific messages.",
      "reply": []
    },
    {
      "user": "trieudo",
      "selectedAnswer": "C",
      "body": "keyword: MOST scalable way, only the partner's own orders\n\n==> Discard A: you must update lambda for new topic added, but it simple for case having few partners, and little change\n==> Discard B: You must create duplicate lambda function and maintain it. But best case for customized comlexity requirements\n==> Discard D: it is easy to scalable, but violate rule 'only the partner's own orders', when a partner can see msg of all anothers\n\nC: best choice, match with 2 keywords above",
      "reply": []
    },
    {
      "user": "wail1997",
      "selectedAnswer": "A",
      "body": "because of the fact that By default, you can have up to 200 filter policies per topic, the C option can't be the wright answer, but it's the A choice. since we can go up to 100 00 topics per SNS",
      "reply": [
        {
          "user": "AnthonyTL",
          "body": "With C, if it's more that 200 partners, we could create another SNS for the next 200 partners. so it couls support up to 2000000 partners."
        }
      ]
    },
    {
      "user": "AnthonyTL",
      "selectedAnswer": "",
      "body": "With C, if it's more that 200 partners, we could create another SNS for the next 200 partners. so it couls support up to 2000000 partners.",
      "reply": []
    },
    {
      "user": "ACurryDeveloper",
      "selectedAnswer": "",
      "body": "A works, but C is better, benchods. More efficient. Have to remember good curry cannot be had in a hurry",
      "reply": []
    },
    {
      "user": "Anandesh",
      "selectedAnswer": "C",
      "body": "https://docs.aws.amazon.com/sns/latest/dg/example-filter-policies.html",
      "reply": []
    },
    {
      "user": "65703c1",
      "selectedAnswer": "C",
      "body": "C is the correct answer.",
      "reply": []
    },
    {
      "user": "Prosen2522",
      "selectedAnswer": "C",
      "body": "Funny understand why some people want to create separate SNS for each partner. You have got the option to filter and send notifications to the appropriate partner.",
      "reply": []
    },
    {
      "user": "badsati",
      "selectedAnswer": "C",
      "body": "Answer is C ... No Question",
      "reply": []
    },
    {
      "user": "xdkonorek2",
      "selectedAnswer": "A",
      "body": "you can create up to \n 10.000 filter policies per AWS account\n 200 filter policies per topic (not subscription!) limits option C to 200 partners\n 100 000 topics per AWS account, limits option A to 100 000 partners\n\nA and C works but A has better scalability with ability to add 100 000 partners",
      "reply": [
        {
          "user": "drycleansing",
          "body": "the best answer"
        }
      ]
    },
    {
      "user": "drycleansing",
      "selectedAnswer": "",
      "body": "the best answer",
      "reply": []
    },
    {
      "user": "leonardoliveros",
      "selectedAnswer": "C",
      "body": "You can using a filter policy to just sent the info by partner",
      "reply": []
    },
    {
      "user": "ninomfr64",
      "selectedAnswer": "C",
      "body": "C. adding a new partner would only require to create a new subscription with the right filter",
      "reply": []
    },
    {
      "user": "tttamtttam",
      "selectedAnswer": "C",
      "body": "C seems the most efficient way. when you add more partners, you can just assign new codes for each partner. with the codes, you can send notifications to specific paters",
      "reply": []
    },
    {
      "user": "rlnd2000",
      "selectedAnswer": "A",
      "body": "The answer is A since this question has two crucial requirements: \na) ... with the fewest code changes possible. \n\nb) ...in the MOST scalable way\n\nChatGPT initially gives an incorrect answer and then adjusts its response when requirements are asked.",
      "reply": [
        {
          "user": "rlnd2000",
          "body": "OOH another important requirement: Each partner must receive updates for only the partner's own orders, that is not achievable with option C"
        },
        {
          "user": "Jeremy11",
          "body": "This part of C seems to meet that requirement: Apply the appropriate filter policy to the topic subscriptions."
        },
        {
          "user": "Skywalker23",
          "body": "Cannot be A. It requires change of lambda function code to send notifications to new SNS topics for new partners. Not a scalable solution."
        }
      ]
    },
    {
      "user": "rlnd2000",
      "selectedAnswer": "",
      "body": "OOH another important requirement: Each partner must receive updates for only the partner's own orders, that is not achievable with option C",
      "reply": [
        {
          "user": "Jeremy11",
          "body": "This part of C seems to meet that requirement: Apply the appropriate filter policy to the topic subscriptions."
        }
      ]
    },
    {
      "user": "Jeremy11",
      "selectedAnswer": "",
      "body": "This part of C seems to meet that requirement: Apply the appropriate filter policy to the topic subscriptions.",
      "reply": []
    },
    {
      "user": "Skywalker23",
      "selectedAnswer": "",
      "body": "Cannot be A. It requires change of lambda function code to send notifications to new SNS topics for new partners. Not a scalable solution.",
      "reply": []
    },
    {
      "user": "geekdamsel",
      "selectedAnswer": "",
      "body": "Got this question in exam. Correct answer is C.",
      "reply": []
    },
    {
      "user": "Rpod",
      "selectedAnswer": "C",
      "body": "C is the answer",
      "reply": []
    }
  ]
}